// Generated by LiveScript 1.5.0
(function(){
  var level, sodium, exportDb, importDb, createDb, write, writeStream, read, readStream, toHex, toBuff, sign, verify, createAccount, createCryptoBox, out$ = typeof exports != 'undefined' && exports || this;
  level = require('level-browserify');
  sodium = require('chloride/browser');
  out$.exportDb = exportDb = function(db, cb){
    var data;
    data = [];
    db.createReadStream().on('data', function(r){
      return data.push(r);
    }).on('end', function(){
      if (cb) {
        return cb(data);
      }
    });
  };
  out$.importDb = importDb = function(db, cb){
    var data;
    data = [];
    db.createReadStream().on('data', function(r){
      return data.push(r);
    }).on('end', function(){
      if (cb) {
        return cb(data);
      }
    });
  };
  out$.createDb = createDb = function(it){
    return level(it, {
      valueEncoding: 'json'
    });
  };
  out$.write = write = function(db, key, value, cb){
    if (db) {
      return db.put(key, value, function(r, e){
        if (cb) {
          return cb(r, e);
        }
      });
    }
  };
  out$.writeStream = writeStream = function(db, key, value, cb){
    return db.wr(key, value, function(r, e){
      if (cb) {
        return cb(r, e);
      }
    });
  };
  out$.read = read = function(db, key, cb){
    return db.get(key, function(r, e){
      if (cb) {
        return cb(r, e);
      }
    });
  };
  out$.readStream = readStream = function(db, key, cb){
    return db.get(key, function(r, e){
      if (cb) {
        return cb(r, e);
      }
    });
  };
  out$.toHex = toHex = function(it){
    return it.toString('hex');
  };
  out$.toBuff = toBuff = function(it){
    return Buffer(it, 'hex');
  };
  out$.sign = sign = function(message){
    var secretKey, msg, sig;
    secretKey = Buffer(_keys.secretKey, 'hex');
    msg = new Buffer(message);
    sig = sodium.crypto_sign_detached(msg, secretKey);
    return sig.toString('hex');
  };
  out$.verify = verify = function(sig, pub, message){
    return import$(sodium.crypto_sign_verify_detached, toBuff);
  };
  out$.createAccount = createAccount = function(){
    return sodium.crypto_sign_keypair();
  };
  out$.createCryptoBox = createCryptoBox = function(){
    return sodium.crypto_box_keypair();
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
